#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, hashlib

DATA_SIZE = 1375 

class Sender:
    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False

        # 
        self.window_size = 4
        self.packet_count = 0
        self.sequence_num = 0

        # packets control
        self.packets = [] 
        self.pending = []

        # Timeout and congestion control
        self.RTT = 1
        self.timeout = self.RTT * 2
        self.cwnd = 1
        self.ssthresh = self.window_size

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    # Check for timeout
    # Retransmit the file if timeout
    def timeOutCheck(self):
        # Loop through the pending acks to check
        for packet in self.pending:
            if time.time() - packet["time"] > self.timeout:
                self.ssthresh = self.cwnd / 2
                self.cwnd = 1
                self.log("RETRANSMIT:Sending message '%s'" % packet)
                packet["time"] = time.time()
                self.send(packet)
    
    def checkAck(self, msg):
        # if ack is the same as given msg, delete it from pending
        for ack in self.pending:
            if ack["num"] == msg["num"]:
                self.pending.remove(ack)
                break    
        if self.cwnd < self.ssthresh:
            self.cwnd += 1
        else:
            self.cwnd + self.cwnd + (1 / self.cwnd)
        self.log("Received ACK '%s'" % msg)
        
        # modify RTT based on feedback
        self.RTT = (.875 * self.RTT) + .125 * (time.time() - msg["time"])
        self.timeout = self.RTT * 2

        self.waiting = False
    
    # Send the packet and adjust the value in sender correspondingly
    def sendPacket(self, msg):
        if msg["num"] not in self.packets:
            self.log("Sending message '%s'" % msg)
            self.sequence_num += 1  
            self.packet_count += 1
            self.send(msg)
            self.pending.append(msg)
            self.packets.append(msg["num"])
        if self.cwnd < self.packet_count: 
            self.waiting = True

    def run(self):
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]
            socks = select.select(sockets, [], [], 0.1)[0]
            for conn in socks:
                if conn == self.socket:
                    k, addr = conn.recvfrom(65535)
                    self.packet_count -= 1
                    msg = k.decode('utf-8')
                    try:
                        # receives the message as a json
                        msg = json.loads(msg)
                        # lopp through all the pending and check for the same num
                        for message in self.pending:
                            if message["num"] == msg["num"]:
                                data = message["data"]

                        # checksum to check if the package is corrupt
                        if msg["checksum"] == hashlib.md5(data.encode('utf-8')).hexdigest(): 
                            self.checkAck(msg)
                    except:
                        continue

                elif conn == sys.stdin:
                    data = sys.stdin.read(DATA_SIZE)
                    # if no more data and pending ack, exit the loop
                    if len(data) == 0 and len(self.pending) == 0:
                        self.log("All done!")
                        sys.exit(0)
                    elif len(data) != 0:
                        checksum_data = hashlib.md5(data.encode('utf-8')).hexdigest()
                        # modify the value in msg field to send
                        msg = { "type": "msg", "num": self.sequence_num, "data": data, "time": time.time(), "checksum": checksum_data}
                        self.sendPacket(msg)
            self.timeOutCheck()                    
        return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
