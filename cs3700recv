#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None

        self.window = {}
        self.send_sequence_number = 0
        self.recv_sequence_number = 100

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                # Grab the remote host/port if we don't alreadt have it
                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                msg = json.loads(data.decode('utf-8'))
                self.log("Received data message %s" % msg)
                # Print out the data to stdout
                if (msg['snum'] not in self.window):
                    print(msg["data"], end='', flush=True)
                    self.send_sequence_number = msg['snum']
                    self.window[msg['snum']] = msg 
                    self.recv_sequence_number += 1
                    # Always send back an ack
                    self.send({ "type": "ack",'rnum':self.recv_sequence_number, 'snum':self.send_sequence_number })
                else:
                    self.log("Snum is already in wnd")
                    self.log('Dup num %s' % (msg['snum']))
        return
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    sender = Receiver()
    sender.run()